'use strict';

angular.module('ahotelApp', ['ui.router']);
"use strict";

angular.module('ahotelApp').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
	'use strict';

	$urlRouterProvider.otherwise('/');

	$stateProvider.state('template', {
		url: '/template',
		templateUrl: 'templates/template.html'
	});
}]);
'use strict';

angular.module('ahotelApp').directive('ahHeader', function () {
	"use strict";

	return {
		restrict: "EAC",
		templateUrl: 'app/templates/header/header.html'
	};
});
'use strict';

angular.module('ahotelApp').service('HeaderTransitionsService', ['$timeout', function ($timeout) {
	"use strict";

	function UItransitions(containerQuery) {
		//todo errors
		this.container = $(containerQuery);
	}

	UItransitions.prototype.elementTransition = function (targetElementsQuery, _ref) {
		var _ref$cssEnumerableRul = _ref.cssEnumerableRule,
		    cssEnumerableRule = _ref$cssEnumerableRul === undefined ? 'width' : _ref$cssEnumerableRul,
		    _ref$from = _ref.from,
		    from = _ref$from === undefined ? 0 : _ref$from,
		    _ref$to = _ref.to,
		    to = _ref$to === undefined ? 'auto' : _ref$to,
		    _ref$delay = _ref.delay,
		    delay = _ref$delay === undefined ? 100 : _ref$delay;

		//todo errors
		this.container.mouseenter(function () {
			var targetElements = $(this).find(targetElementsQuery),
			    targetElementsFinishState;

			targetElements.css(cssEnumerableRule, to);
			targetElementsFinishState = targetElements.css(cssEnumerableRule);
			targetElements.css(cssEnumerableRule, from);

			var animateOptions = {};
			animateOptions[cssEnumerableRule] = targetElementsFinishState;

			targetElements.animate(animateOptions, delay);
		});
	};

	function HeaderTransitions(headerQuery, containerQuery) {
		this.header = $(headerQuery);
		UItransitions.call(this, containerQuery);
	}

	HeaderTransitions.prototype = Object.create(UItransitions.prototype);
	HeaderTransitions.prototype.constructor = HeaderTransitions;

	HeaderTransitions.prototype.fixHeaderElement = function (_fixElement, fixClassName, unfixClassName, options) {
		var self = this;
		var fixElement = $(_fixElement);

		function onWidthChangeHandler() {
			var timer = void 0;

			function fixUnfixMenuOnScroll() {
				if ($(window).scrollTop() > options.onMinScrolltop) {
					fixElement.addClass(fixClassName);
				} else {
					fixElement.removeClass(fixClassName);
				}

				timer = null;
			}

			if ($(window).width() < options.onMaxWindowWidth) {
				fixUnfixMenuOnScroll();
				self.header.addClass(unfixClassName);

				$(window).off("scroll");
				$(window).scroll(function () {
					if (!timer) {
						timer = $timeout(fixUnfixMenuOnScroll, 150);
					}
				});
			} else {
				self.header.removeClass(unfixClassName);
				fixElement.removeClass(fixClassName);
				$(window).off("scroll");
			}
		}

		onWidthChangeHandler();
		$(window).on('resize', onWidthChangeHandler);
	};

	return HeaderTransitions;
}]);
'use strict';

angular.module('ahotelApp').directive('ahtlStikyHeader', ['HeaderTransitionsService', function (HeaderTransitionsService) {
	"use strict";

	function link() {
		var header = new HeaderTransitionsService('.l-header', '.nav__item-container');

		header.elementTransition('.sub-nav', {
			cssEnumerableRule: 'height',
			delay: 300
		});

		header.fixHeaderElement('.nav', 'js_nav--fixed', 'js_l-header--relative', {
			onMinScrolltop: 88,
			onMaxWindowWidth: 850
		});
	}

	return {
		restrict: "A",
		link: link
	};
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
