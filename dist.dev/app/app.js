'use strict';

angular.module('ahotelApp', ['ui.router', 'ngAnimate']);
'use strict';

angular.module('ahotelApp').factory('PreloadImages', function () {
	"use strict";

	function PreloadImages(imageList) {
		this._imageSrcList = imageList;

		function preLoad(imageList) {

			var promises = [];

			function loadImage(src) {
				return new Promise(function (resolve, reject) {
					var image = new Image();
					image.src = src;
					image.onload = function () {
						console.log("loaded image: " + src);
						resolve(image);
					};
					image.onerror = function (e) {
						reject(e);
					};
				});
			}

			for (var i = 0; i < imageList.length; i++) {
				promises.push(loadImage(imageList[i]));
			}

			return Promise.all(promises).then(function (results) {
				console.log('promises array all resolved');
				console.dir(results);
				return results;
			});
		}

		preLoad(this._imageSrcList);
	}

	return PreloadImages;
});

/*
//hmm... Ang1.3.x+
angular.module('ahotelApp')
	.factory('PreloadImages', ['$q', function() {
		"use strict";

		function PreloadImages(imageList) {
			this._imageSrcList = imageList;

			function preLoad(imageList) {

				var promises = [];

				function loadImage(src) {
					return $q(function (resolve, reject) {
						var image = new Image();
						image.src = src;
						image.onload = function () {
							console.log("loaded image: " + src);
							resolve(image);
						};
						image.onerror = function (e) {
							reject(e);
						};
					})
				}

				for (let i = 0; i < imageList.length; i++) {
					promises.push(loadImage(imageList[i]));
				}

				return $q(promises).then(function (results) {
					console.log('promises array all resolved');
					console.dir(results);
					return results;
				});
			}

			preLoad(this._imageSrcList);
		}

		return PreloadImages
	}]);*/
'use strict';

angular.module('ahotelApp').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
	'use strict';

	$urlRouterProvider.otherwise('/');

	$stateProvider.state('template', {
		url: '/template',
		templateUrl: 'templates/template.html'
	});
}]);
'use strict';

angular.module('ahotelApp').directive('ahtlHeader', function () {
	"use strict";

	return {
		restrict: "EAC",
		templateUrl: 'app/templates/header/header.html'
	};
});
'use strict';

angular.module('ahotelApp').service('HeaderTransitionsService', ['$timeout', function ($timeout) {
	"use strict";

	function UItransitions(containerQuery) {
		//todo errors
		this.container = $(containerQuery);
	}

	UItransitions.prototype.elementTransition = function (targetElementsQuery, _ref) {
		var _ref$cssEnumerableRul = _ref.cssEnumerableRule,
		    cssEnumerableRule = _ref$cssEnumerableRul === undefined ? 'width' : _ref$cssEnumerableRul,
		    _ref$from = _ref.from,
		    from = _ref$from === undefined ? 0 : _ref$from,
		    _ref$to = _ref.to,
		    to = _ref$to === undefined ? 'auto' : _ref$to,
		    _ref$delay = _ref.delay,
		    delay = _ref$delay === undefined ? 100 : _ref$delay;

		//todo errors
		this.container.mouseenter(function () {
			var targetElements = $(this).find(targetElementsQuery),
			    targetElementsFinishState;

			targetElements.css(cssEnumerableRule, to);
			targetElementsFinishState = targetElements.css(cssEnumerableRule);
			targetElements.css(cssEnumerableRule, from);

			var animateOptions = {};
			animateOptions[cssEnumerableRule] = targetElementsFinishState;

			targetElements.animate(animateOptions, delay);
		});
	};

	function HeaderTransitions(headerQuery, containerQuery) {
		this.header = $(headerQuery);
		UItransitions.call(this, containerQuery);
	}

	HeaderTransitions.prototype = Object.create(UItransitions.prototype);
	HeaderTransitions.prototype.constructor = HeaderTransitions;

	HeaderTransitions.prototype.fixHeaderElement = function (_fixElement, fixClassName, unfixClassName, options) {
		var self = this;
		var fixElement = $(_fixElement);

		function onWidthChangeHandler() {
			var timer = void 0;

			function fixUnfixMenuOnScroll() {
				if ($(window).scrollTop() > options.onMinScrolltop) {
					fixElement.addClass(fixClassName);
				} else {
					fixElement.removeClass(fixClassName);
				}

				timer = null;
			}

			if ($(window).width() < options.onMaxWindowWidth) {
				fixUnfixMenuOnScroll();
				self.header.addClass(unfixClassName);

				$(window).off("scroll");
				$(window).scroll(function () {
					if (!timer) {
						timer = $timeout(fixUnfixMenuOnScroll, 150);
					}
				});
			} else {
				self.header.removeClass(unfixClassName);
				fixElement.removeClass(fixClassName);
				$(window).off("scroll");
			}
		}

		onWidthChangeHandler();
		$(window).on('resize', onWidthChangeHandler);
	};

	return HeaderTransitions;
}]);
'use strict';

angular.module('ahotelApp').directive('ahtlStikyHeader', ['HeaderTransitionsService', function (HeaderTransitionsService) {
	"use strict";

	function link() {
		var header = new HeaderTransitionsService('.l-header', '.nav__item-container');

		header.elementTransition('.sub-nav', {
			cssEnumerableRule: 'height',
			delay: 300
		});

		header.fixHeaderElement('.nav', 'js_nav--fixed', 'js_l-header--relative', {
			onMinScrolltop: 88,
			onMaxWindowWidth: 850
		});
	}

	return {
		restrict: "A",
		scope: {},
		link: link
	};
}]);
'use strict';

angular.module('ahotelApp').directive('ahtlSlider', ['sliderService', function (sliderService) {
	"use strict";

	ahtlSliderController.$inject = ["$scope"];
	function ahtlSliderController($scope) {
		$scope.slider = sliderService;
		$scope.slidingDirection = null;

		$scope.nextSlide = function () {
			$scope.slidingDirection = 'left';
			$scope.slider.getNextSlide();
		};

		$scope.prevSlide = function () {
			$scope.slidingDirection = 'right';
			$scope.slider.getPrevSlide();
		};

		$scope.setSlide = function (index) {
			$scope.slidingDirection = index > $scope.slider.getCurrentSlide(true) ? 'right' : 'left';
			$scope.slider.setCurrentSlide(index);
		};
	}

	function link(scope, elem) {
		var arrows = $(elem).find('.slider__arrow');

		arrows.click(function () {
			var _this = this;

			// fixing IE8 png-background bug with 2 bg images
			if ($(this).hasClass('slider__arrow-right')) {
				$(this).css('background-image', 'url("../assets/images/slider/arrow_right_opacity.png")');
			} else {
				$(this).css('background-image', 'url("../assets/images/slider/arrow_left_opacity.png")');
			}

			this.disabled = true;

			setTimeout(function () {
				_this.disabled = false;
				if ($(_this).hasClass('slider__arrow-right')) {
					$(_this).css('background-image', 'url("../assets/images/slider/arrow_right.png")');
				} else {
					$(_this).css('background-image', 'url("../assets/images/slider/arrow_left.png")');
				}
			}, 500);
		});
	}

	return {
		restrict: 'EA',
		scope: {},
		controller: ahtlSliderController,
		templateUrl: 'app/templates/header/slider/slider.html',
		link: link
	};
}]);
'use strict';

angular.module('ahotelApp').animation('.slider__img', function () {
	return {
		beforeAddClass: function beforeAddClass(element, className, done) {
			var slidingDirection = element.scope().slidingDirection;
			$(element).css('z-index', '1');

			if (slidingDirection === 'right') {
				$(element).animate({ 'left': '100%' }, 500, done);
			} else {
				$(element).animate({ 'left': '-200%' }, 500, done); //why 200? $)
			}
		},
		addClass: function addClass(element, className, done) {
			var an = new Promise(function (res) {
				"use strict";

				$(element).css('z-index', '0');
				$(element).css('left', '0');
				res();
			});

			an.then(function () {
				done();
			});
		}
	};
});
'use strict';

angular.module('ahotelApp').factory('sliderService', [function () {
	"use strict";

	function Slider(sliderImageList) {
		this._imageSrcList = sliderImageList;
		this._currentSlide = 0;
	}

	Slider.prototype.getImageSrcList = function () {
		return this._imageSrcList;
	};

	Slider.prototype.getCurrentSlide = function (getIndex) {
		return getIndex == true ? this._currentSlide : this._imageSrcList[this._currentSlide];
	};

	Slider.prototype.setCurrentSlide = function (slide) {
		this._currentSlide = slide;
	};

	Slider.prototype.getNextSlide = function () {
		this._currentSlide === this._imageSrcList.length - 1 ? this._currentSlide = 0 : this._currentSlide++;

		this.getCurrentSlide();
	};

	Slider.prototype.getPrevSlide = function () {
		this._currentSlide === 0 ? this._currentSlide = this._imageSrcList.length - 1 : this._currentSlide--;

		this.getCurrentSlide();
	};

	return new Slider(['assets/images/slider/slider1.jpg', 'assets/images/slider/slider2.jpg', 'assets/images/slider/slider3.jpg']);
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInByZWxvYWRJbWdTZXJ2aWNlLmpzIiwicm91dGVzLmpzIiwidGVtcGxhdGVzL2hlYWRlci9oZWFkZXJEaXJlY3RpdmUuanMiLCJ0ZW1wbGF0ZXMvaGVhZGVyL2hlYWRlclRyYW5zaXRpb25zU2VydmljZS5qcyIsInRlbXBsYXRlcy9oZWFkZXIvc3Rpa3lIZWFkZXJEaXJlY3RpdmUuanMiLCJ0ZW1wbGF0ZXMvaGVhZGVyL3NsaWRlci9zbGlkZXIuZGlyZWN0aXZlLmpzIiwidGVtcGxhdGVzL2hlYWRlci9zbGlkZXIvc2xpZGVyQW5pbWF0aW9uLmpzIiwidGVtcGxhdGVzL2hlYWRlci9zbGlkZXIvc2xpZGVyU2VydmljZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiZmFjdG9yeSIsIlByZWxvYWRJbWFnZXMiLCJpbWFnZUxpc3QiLCJfaW1hZ2VTcmNMaXN0IiwicHJlTG9hZCIsInByb21pc2VzIiwibG9hZEltYWdlIiwic3JjIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpbWFnZSIsIkltYWdlIiwib25sb2FkIiwiY29uc29sZSIsImxvZyIsIm9uZXJyb3IiLCJlIiwiaSIsImxlbmd0aCIsInB1c2giLCJhbGwiLCJ0aGVuIiwicmVzdWx0cyIsImRpciIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImRpcmVjdGl2ZSIsInJlc3RyaWN0Iiwic2VydmljZSIsIiR0aW1lb3V0IiwiVUl0cmFuc2l0aW9ucyIsImNvbnRhaW5lclF1ZXJ5IiwiY29udGFpbmVyIiwiJCIsInByb3RvdHlwZSIsImVsZW1lbnRUcmFuc2l0aW9uIiwidGFyZ2V0RWxlbWVudHNRdWVyeSIsImNzc0VudW1lcmFibGVSdWxlIiwiZnJvbSIsInRvIiwiZGVsYXkiLCJtb3VzZWVudGVyIiwidGFyZ2V0RWxlbWVudHMiLCJmaW5kIiwidGFyZ2V0RWxlbWVudHNGaW5pc2hTdGF0ZSIsImNzcyIsImFuaW1hdGVPcHRpb25zIiwiYW5pbWF0ZSIsIkhlYWRlclRyYW5zaXRpb25zIiwiaGVhZGVyUXVlcnkiLCJoZWFkZXIiLCJjYWxsIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJmaXhIZWFkZXJFbGVtZW50IiwiX2ZpeEVsZW1lbnQiLCJmaXhDbGFzc05hbWUiLCJ1bmZpeENsYXNzTmFtZSIsIm9wdGlvbnMiLCJzZWxmIiwiZml4RWxlbWVudCIsIm9uV2lkdGhDaGFuZ2VIYW5kbGVyIiwidGltZXIiLCJmaXhVbmZpeE1lbnVPblNjcm9sbCIsIndpbmRvdyIsInNjcm9sbFRvcCIsIm9uTWluU2Nyb2xsdG9wIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsIndpZHRoIiwib25NYXhXaW5kb3dXaWR0aCIsIm9mZiIsInNjcm9sbCIsIm9uIiwiSGVhZGVyVHJhbnNpdGlvbnNTZXJ2aWNlIiwibGluayIsInNjb3BlIiwic2xpZGVyU2VydmljZSIsImFodGxTbGlkZXJDb250cm9sbGVyIiwiJHNjb3BlIiwic2xpZGVyIiwic2xpZGluZ0RpcmVjdGlvbiIsIm5leHRTbGlkZSIsImdldE5leHRTbGlkZSIsInByZXZTbGlkZSIsImdldFByZXZTbGlkZSIsInNldFNsaWRlIiwiaW5kZXgiLCJnZXRDdXJyZW50U2xpZGUiLCJzZXRDdXJyZW50U2xpZGUiLCJlbGVtIiwiYXJyb3dzIiwiY2xpY2siLCJoYXNDbGFzcyIsImRpc2FibGVkIiwic2V0VGltZW91dCIsImNvbnRyb2xsZXIiLCJhbmltYXRpb24iLCJiZWZvcmVBZGRDbGFzcyIsImVsZW1lbnQiLCJjbGFzc05hbWUiLCJkb25lIiwiYW4iLCJyZXMiLCJTbGlkZXIiLCJzbGlkZXJJbWFnZUxpc3QiLCJfY3VycmVudFNsaWRlIiwiZ2V0SW1hZ2VTcmNMaXN0IiwiZ2V0SW5kZXgiLCJzbGlkZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQUFBLFFBQVFDLE9BQU8sYUFBYSxDQUFDLGFBQWEs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b2R1bGUoJ2Fob3RlbEFwcCcsIFsndWkucm91dGVyJywgJ25nQW5pbWF0ZSddKTsiLCJhbmd1bGFyLm1vZHVsZSgnYWhvdGVsQXBwJylcclxuXHQuZmFjdG9yeSgnUHJlbG9hZEltYWdlcycsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5cdFx0ZnVuY3Rpb24gUHJlbG9hZEltYWdlcyhpbWFnZUxpc3QpIHtcclxuXHRcdFx0dGhpcy5faW1hZ2VTcmNMaXN0ID0gaW1hZ2VMaXN0O1xyXG5cclxuXHRcdFx0ZnVuY3Rpb24gcHJlTG9hZChpbWFnZUxpc3QpIHtcclxuXHJcblx0XHRcdFx0dmFyIHByb21pc2VzID0gW107XHJcblxyXG5cdFx0XHRcdGZ1bmN0aW9uIGxvYWRJbWFnZShzcmMpIHtcclxuXHRcdFx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblx0XHRcdFx0XHRcdHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG5cdFx0XHRcdFx0XHRpbWFnZS5zcmMgPSBzcmM7XHJcblx0XHRcdFx0XHRcdGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcImxvYWRlZCBpbWFnZTogXCIgKyBzcmMpO1xyXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoaW1hZ2UpO1xyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0XHRpbWFnZS5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0XHRcdFx0XHRyZWplY3QoZSk7XHJcblx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZUxpc3QubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRcdHByb21pc2VzLnB1c2gobG9hZEltYWdlKGltYWdlTGlzdFtpXSkpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZygncHJvbWlzZXMgYXJyYXkgYWxsIHJlc29sdmVkJyk7XHJcblx0XHRcdFx0XHRjb25zb2xlLmRpcihyZXN1bHRzKTtcclxuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwcmVMb2FkKHRoaXMuX2ltYWdlU3JjTGlzdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIFByZWxvYWRJbWFnZXNcclxuXHR9KTtcclxuXHJcbi8qXHJcbi8vaG1tLi4uIEFuZzEuMy54K1xyXG5hbmd1bGFyLm1vZHVsZSgnYWhvdGVsQXBwJylcclxuXHQuZmFjdG9yeSgnUHJlbG9hZEltYWdlcycsIFsnJHEnLCBmdW5jdGlvbigpIHtcclxuXHRcdFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHRcdGZ1bmN0aW9uIFByZWxvYWRJbWFnZXMoaW1hZ2VMaXN0KSB7XHJcblx0XHRcdHRoaXMuX2ltYWdlU3JjTGlzdCA9IGltYWdlTGlzdDtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIHByZUxvYWQoaW1hZ2VMaXN0KSB7XHJcblxyXG5cdFx0XHRcdHZhciBwcm9taXNlcyA9IFtdO1xyXG5cclxuXHRcdFx0XHRmdW5jdGlvbiBsb2FkSW1hZ2Uoc3JjKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gJHEoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuXHRcdFx0XHRcdFx0aW1hZ2Uuc3JjID0gc3JjO1xyXG5cdFx0XHRcdFx0XHRpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJsb2FkZWQgaW1hZ2U6IFwiICsgc3JjKTtcclxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKGltYWdlKTtcclxuXHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0aW1hZ2Uub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRJbWFnZShpbWFnZUxpc3RbaV0pKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJldHVybiAkcShwcm9taXNlcykudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ3Byb21pc2VzIGFycmF5IGFsbCByZXNvbHZlZCcpO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5kaXIocmVzdWx0cyk7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cHJlTG9hZCh0aGlzLl9pbWFnZVNyY0xpc3QpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBQcmVsb2FkSW1hZ2VzXHJcblx0fV0pOyovXHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbmFuZ3VsYXIubW9kdWxlKCdhaG90ZWxBcHAnKVxyXG5cclxuXHQuY29uZmlnKFtcIiRzdGF0ZVByb3ZpZGVyXCIsXCIkdXJsUm91dGVyUHJvdmlkZXJcIiwgZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlcikge1xyXG5cdFx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHRcdCR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy8nKTtcclxuXHJcblx0XHQkc3RhdGVQcm92aWRlclxyXG5cdFx0XHQuc3RhdGUoJ3RlbXBsYXRlJywge1xyXG5cdFx0XHRcdHVybDogJy90ZW1wbGF0ZScsXHJcblx0XHRcdFx0dGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZXMvdGVtcGxhdGUuaHRtbCdcclxuXHRcdFx0fSlcclxuXHR9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Fob3RlbEFwcCcpXHJcblxyXG5cdC5kaXJlY3RpdmUoJ2FodGxIZWFkZXInLCBmdW5jdGlvbigpIHtcclxuXHRcdFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHJlc3RyaWN0OiBcIkVBQ1wiLFxyXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ2FwcC90ZW1wbGF0ZXMvaGVhZGVyL2hlYWRlci5odG1sJ1xyXG5cdFx0fVxyXG5cdH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhaG90ZWxBcHAnKVxyXG5cclxuXHQuc2VydmljZSgnSGVhZGVyVHJhbnNpdGlvbnNTZXJ2aWNlJywgWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KSB7XHJcblx0XHRcInVzZSBzdHJpY3RcIjtcclxuXHRcdFx0ZnVuY3Rpb24gVUl0cmFuc2l0aW9ucyhjb250YWluZXJRdWVyeSkge1xyXG5cdFx0XHQvL3RvZG8gZXJyb3JzXHJcblx0XHRcdHRoaXMuY29udGFpbmVyID0gJChjb250YWluZXJRdWVyeSk7XHJcblx0XHR9XHJcblxyXG5cdFx0VUl0cmFuc2l0aW9ucy5wcm90b3R5cGUuZWxlbWVudFRyYW5zaXRpb24gPSBmdW5jdGlvbih0YXJnZXRFbGVtZW50c1F1ZXJ5LFxyXG5cdFx0XHR7Y3NzRW51bWVyYWJsZVJ1bGUgPSAnd2lkdGgnLCBmcm9tID0gMCwgdG8gPSAnYXV0bycsIGRlbGF5ID0gMTAwfSkge1xyXG5cdFx0XHQvL3RvZG8gZXJyb3JzXHJcblx0XHRcdHRoaXMuY29udGFpbmVyLm1vdXNlZW50ZXIoXHJcblx0XHRcdFx0ZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0dmFyIHRhcmdldEVsZW1lbnRzID0gJCh0aGlzKS5maW5kKHRhcmdldEVsZW1lbnRzUXVlcnkpLFxyXG5cdFx0XHRcdFx0XHR0YXJnZXRFbGVtZW50c0ZpbmlzaFN0YXRlO1xyXG5cclxuXHRcdFx0XHRcdHRhcmdldEVsZW1lbnRzLmNzcyhjc3NFbnVtZXJhYmxlUnVsZSwgdG8pO1xyXG5cdFx0XHRcdFx0dGFyZ2V0RWxlbWVudHNGaW5pc2hTdGF0ZSA9IHRhcmdldEVsZW1lbnRzLmNzcyhjc3NFbnVtZXJhYmxlUnVsZSk7XHJcblx0XHRcdFx0XHR0YXJnZXRFbGVtZW50cy5jc3MoY3NzRW51bWVyYWJsZVJ1bGUsIGZyb20pO1xyXG5cclxuXHRcdFx0XHRcdGxldCBhbmltYXRlT3B0aW9ucyA9IHt9O1xyXG5cdFx0XHRcdFx0YW5pbWF0ZU9wdGlvbnNbY3NzRW51bWVyYWJsZVJ1bGVdID0gdGFyZ2V0RWxlbWVudHNGaW5pc2hTdGF0ZTtcclxuXHJcblx0XHRcdFx0XHR0YXJnZXRFbGVtZW50cy5hbmltYXRlKGFuaW1hdGVPcHRpb25zLCBkZWxheSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRmdW5jdGlvbiBIZWFkZXJUcmFuc2l0aW9ucyhoZWFkZXJRdWVyeSwgY29udGFpbmVyUXVlcnkpIHtcclxuXHRcdFx0dGhpcy5oZWFkZXIgPSAkKGhlYWRlclF1ZXJ5KTtcclxuXHRcdFx0VUl0cmFuc2l0aW9ucy5jYWxsKHRoaXMsIGNvbnRhaW5lclF1ZXJ5KTtcclxuXHRcdH1cclxuXHJcblx0XHRIZWFkZXJUcmFuc2l0aW9ucy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFVJdHJhbnNpdGlvbnMucHJvdG90eXBlKTtcclxuXHRcdEhlYWRlclRyYW5zaXRpb25zLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhlYWRlclRyYW5zaXRpb25zO1xyXG5cclxuXHRcdEhlYWRlclRyYW5zaXRpb25zLnByb3RvdHlwZS5maXhIZWFkZXJFbGVtZW50ID0gZnVuY3Rpb24oXHJcblx0XHRcdF9maXhFbGVtZW50LCBmaXhDbGFzc05hbWUsIHVuZml4Q2xhc3NOYW1lLCBvcHRpb25zKSB7XHJcblx0XHRcdGxldCBzZWxmID0gdGhpcztcclxuXHRcdFx0bGV0IGZpeEVsZW1lbnQgPSAkKF9maXhFbGVtZW50KTtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIG9uV2lkdGhDaGFuZ2VIYW5kbGVyKCkge1xyXG5cdFx0XHRcdGxldCB0aW1lcjtcclxuXHJcblx0XHRcdFx0ZnVuY3Rpb24gZml4VW5maXhNZW51T25TY3JvbGwoKSB7XHJcblx0XHRcdFx0XHRpZiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpID4gb3B0aW9ucy5vbk1pblNjcm9sbHRvcCkge1xyXG5cdFx0XHRcdFx0XHRmaXhFbGVtZW50LmFkZENsYXNzKGZpeENsYXNzTmFtZSk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRmaXhFbGVtZW50LnJlbW92ZUNsYXNzKGZpeENsYXNzTmFtZSk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGltZXIgPSBudWxsO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCQod2luZG93KS53aWR0aCgpIDwgb3B0aW9ucy5vbk1heFdpbmRvd1dpZHRoKSB7XHJcblx0XHRcdFx0XHRmaXhVbmZpeE1lbnVPblNjcm9sbCgpO1xyXG5cdFx0XHRcdFx0c2VsZi5oZWFkZXIuYWRkQ2xhc3ModW5maXhDbGFzc05hbWUpO1xyXG5cclxuXHRcdFx0XHRcdCQod2luZG93KS5vZmYoXCJzY3JvbGxcIik7XHJcblx0XHRcdFx0XHQkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIXRpbWVyKSB7XHJcblx0XHRcdFx0XHRcdFx0dGltZXIgPSAkdGltZW91dChmaXhVbmZpeE1lbnVPblNjcm9sbCwgMTUwKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHNlbGYuaGVhZGVyLnJlbW92ZUNsYXNzKHVuZml4Q2xhc3NOYW1lKTtcclxuXHRcdFx0XHRcdGZpeEVsZW1lbnQucmVtb3ZlQ2xhc3MoZml4Q2xhc3NOYW1lKTtcclxuXHRcdFx0XHRcdCQod2luZG93KS5vZmYoXCJzY3JvbGxcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRvbldpZHRoQ2hhbmdlSGFuZGxlcigpO1xyXG5cdFx0XHQkKHdpbmRvdykub24oJ3Jlc2l6ZScsIG9uV2lkdGhDaGFuZ2VIYW5kbGVyKTtcclxuXHRcdH07XHJcblxyXG5cdFx0cmV0dXJuIEhlYWRlclRyYW5zaXRpb25zXHJcblxyXG5cdH1dKTsiLCJhbmd1bGFyLm1vZHVsZSgnYWhvdGVsQXBwJylcclxuXHJcblx0LmRpcmVjdGl2ZSgnYWh0bFN0aWt5SGVhZGVyJywgWydIZWFkZXJUcmFuc2l0aW9uc1NlcnZpY2UnLCBmdW5jdGlvbihIZWFkZXJUcmFuc2l0aW9uc1NlcnZpY2UpIHtcclxuXHRcdFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHRcdGZ1bmN0aW9uIGxpbmsoKSB7XHJcblx0XHRcdGxldCBoZWFkZXIgPSBuZXcgSGVhZGVyVHJhbnNpdGlvbnNTZXJ2aWNlKCcubC1oZWFkZXInLCAnLm5hdl9faXRlbS1jb250YWluZXInKTtcclxuXHJcblx0XHRcdGhlYWRlci5lbGVtZW50VHJhbnNpdGlvbihcclxuXHRcdFx0XHQnLnN1Yi1uYXYnLCB7XHJcblx0XHRcdFx0XHRjc3NFbnVtZXJhYmxlUnVsZTogJ2hlaWdodCcsXHJcblx0XHRcdFx0XHRkZWxheTogMzAwXHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0aGVhZGVyLmZpeEhlYWRlckVsZW1lbnQoXHJcblx0XHRcdFx0XHQnLm5hdicsXHJcblx0XHRcdFx0XHQnanNfbmF2LS1maXhlZCcsXHJcblx0XHRcdFx0XHQnanNfbC1oZWFkZXItLXJlbGF0aXZlJyxcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0b25NaW5TY3JvbGx0b3A6IDg4LFxyXG5cdFx0XHRcdFx0XHRvbk1heFdpbmRvd1dpZHRoOiA4NTBcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHQpXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0cmVzdHJpY3Q6IFwiQVwiLFxyXG5cdFx0XHRzY29wZToge30sXHJcblx0XHRcdGxpbms6IGxpbmtcclxuXHRcdH1cclxuXHR9XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2Fob3RlbEFwcCcpXHJcblxyXG5cdC5kaXJlY3RpdmUoJ2FodGxTbGlkZXInLCBbJ3NsaWRlclNlcnZpY2UnLCBmdW5jdGlvbihzbGlkZXJTZXJ2aWNlKSB7XHJcblx0XHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0XHRmdW5jdGlvbiBhaHRsU2xpZGVyQ29udHJvbGxlcigkc2NvcGUpIHtcclxuXHRcdFx0JHNjb3BlLnNsaWRlciA9IHNsaWRlclNlcnZpY2U7XHJcblx0XHRcdCRzY29wZS5zbGlkaW5nRGlyZWN0aW9uID0gbnVsbDtcclxuXHJcblx0XHRcdCRzY29wZS5uZXh0U2xpZGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQkc2NvcGUuc2xpZGluZ0RpcmVjdGlvbiA9ICdsZWZ0JztcclxuXHRcdFx0XHQkc2NvcGUuc2xpZGVyLmdldE5leHRTbGlkZSgpO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0JHNjb3BlLnByZXZTbGlkZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdCRzY29wZS5zbGlkaW5nRGlyZWN0aW9uID0gJ3JpZ2h0JztcclxuXHRcdFx0XHQkc2NvcGUuc2xpZGVyLmdldFByZXZTbGlkZSgpO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0JHNjb3BlLnNldFNsaWRlID0gZnVuY3Rpb24oaW5kZXgpIHtcclxuXHRcdFx0XHQkc2NvcGUuc2xpZGluZ0RpcmVjdGlvbiA9IGluZGV4ID4gJHNjb3BlLnNsaWRlci5nZXRDdXJyZW50U2xpZGUodHJ1ZSkgPyAncmlnaHQnIDogJ2xlZnQnO1xyXG5cdFx0XHRcdCRzY29wZS5zbGlkZXIuc2V0Q3VycmVudFNsaWRlKGluZGV4KTtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtKSB7XHJcblx0XHRcdGxldCBhcnJvd3MgPSAkKGVsZW0pLmZpbmQoJy5zbGlkZXJfX2Fycm93Jyk7XHJcblxyXG5cdFx0XHRhcnJvd3MuY2xpY2soZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdC8vIGZpeGluZyBJRTggcG5nLWJhY2tncm91bmQgYnVnIHdpdGggMiBiZyBpbWFnZXNcclxuXHRcdFx0XHRpZiAoJCh0aGlzKS5oYXNDbGFzcygnc2xpZGVyX19hcnJvdy1yaWdodCcpKSB7XHJcblx0XHRcdFx0XHQkKHRoaXMpLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoXCIuLi9hc3NldHMvaW1hZ2VzL3NsaWRlci9hcnJvd19yaWdodF9vcGFjaXR5LnBuZ1wiKScpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQkKHRoaXMpLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoXCIuLi9hc3NldHMvaW1hZ2VzL3NsaWRlci9hcnJvd19sZWZ0X29wYWNpdHkucG5nXCIpJyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR0aGlzLmRpc2FibGVkID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLmRpc2FibGVkID0gZmFsc2U7XHJcblx0XHRcdFx0XHRpZiAoJCh0aGlzKS5oYXNDbGFzcygnc2xpZGVyX19hcnJvdy1yaWdodCcpKSB7XHJcblx0XHRcdFx0XHRcdCQodGhpcykuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgJ3VybChcIi4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL2Fycm93X3JpZ2h0LnBuZ1wiKScpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0JCh0aGlzKS5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnLCAndXJsKFwiLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvYXJyb3dfbGVmdC5wbmdcIiknKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LCA1MDApXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHJlc3RyaWN0OiAnRUEnLFxyXG5cdFx0XHRzY29wZToge30sXHJcblx0XHRcdGNvbnRyb2xsZXI6IGFodGxTbGlkZXJDb250cm9sbGVyLFxyXG5cdFx0XHR0ZW1wbGF0ZVVybDogJ2FwcC90ZW1wbGF0ZXMvaGVhZGVyL3NsaWRlci9zbGlkZXIuaHRtbCcsXHJcblx0XHRcdGxpbms6IGxpbmtcclxuXHRcdH1cclxuXHR9XSk7XHJcblxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYWhvdGVsQXBwJylcclxuXHJcblx0LmFuaW1hdGlvbignLnNsaWRlcl9faW1nJywgZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0YmVmb3JlQWRkQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcclxuXHRcdFx0XHRsZXQgc2xpZGluZ0RpcmVjdGlvbiA9IGVsZW1lbnQuc2NvcGUoKS5zbGlkaW5nRGlyZWN0aW9uO1xyXG5cdFx0XHRcdCQoZWxlbWVudCkuY3NzKCd6LWluZGV4JywgJzEnKTtcclxuXHJcblx0XHRcdFx0aWYoc2xpZGluZ0RpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xyXG5cdFx0XHRcdFx0JChlbGVtZW50KS5hbmltYXRlKHsnbGVmdCc6ICcxMDAlJ30sIDUwMCwgZG9uZSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdCQoZWxlbWVudCkuYW5pbWF0ZSh7J2xlZnQnOiAnLTIwMCUnfSwgNTAwLCBkb25lKTsgLy93aHkgMjAwPyAkKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSxcclxuXHRcdFx0YWRkQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcclxuXHRcdFx0XHRsZXQgYW4gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzKSB7XHJcblx0XHRcdFx0XHRcInVzZSBzdHJpY3RcIjtcclxuXHRcdFx0XHRcdCQoZWxlbWVudCkuY3NzKCd6LWluZGV4JywgJzAnKTtcclxuXHRcdFx0XHRcdCQoZWxlbWVudCkuY3NzKCdsZWZ0JywgJzAnKTtcclxuXHRcdFx0XHRcdHJlcygpO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRhbi50aGVuKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdGRvbmUoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuIiwiYW5ndWxhci5tb2R1bGUoJ2Fob3RlbEFwcCcpXHJcblx0LmZhY3RvcnkoJ3NsaWRlclNlcnZpY2UnLCBbZnVuY3Rpb24oKSB7XHJcblx0XHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0XHRcdGZ1bmN0aW9uIFNsaWRlcihzbGlkZXJJbWFnZUxpc3QpIHtcclxuXHRcdFx0XHR0aGlzLl9pbWFnZVNyY0xpc3QgPSBzbGlkZXJJbWFnZUxpc3Q7XHJcblx0XHRcdFx0dGhpcy5fY3VycmVudFNsaWRlID0gMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0U2xpZGVyLnByb3RvdHlwZS5nZXRJbWFnZVNyY0xpc3QgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5faW1hZ2VTcmNMaXN0XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRTbGlkZXIucHJvdG90eXBlLmdldEN1cnJlbnRTbGlkZSA9IGZ1bmN0aW9uKGdldEluZGV4KSB7XHJcblx0XHRcdFx0cmV0dXJuIGdldEluZGV4ID09IHRydWUgPyB0aGlzLl9jdXJyZW50U2xpZGUgOiB0aGlzLl9pbWFnZVNyY0xpc3RbdGhpcy5fY3VycmVudFNsaWRlXVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0U2xpZGVyLnByb3RvdHlwZS5zZXRDdXJyZW50U2xpZGUgPSBmdW5jdGlvbihzbGlkZSkge1xyXG5cdFx0XHRcdHRoaXMuX2N1cnJlbnRTbGlkZSA9IHNsaWRlXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRTbGlkZXIucHJvdG90eXBlLmdldE5leHRTbGlkZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdCh0aGlzLl9jdXJyZW50U2xpZGUgPT09IHRoaXMuX2ltYWdlU3JjTGlzdC5sZW5ndGggLSAxKSA/IHRoaXMuX2N1cnJlbnRTbGlkZSA9IDAgOiB0aGlzLl9jdXJyZW50U2xpZGUrK1xyXG5cclxuXHRcdFx0XHR0aGlzLmdldEN1cnJlbnRTbGlkZSgpO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0U2xpZGVyLnByb3RvdHlwZS5nZXRQcmV2U2xpZGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHQodGhpcy5fY3VycmVudFNsaWRlID09PSAwKSA/IHRoaXMuX2N1cnJlbnRTbGlkZSA9IHRoaXMuX2ltYWdlU3JjTGlzdC5sZW5ndGggLSAxIDogdGhpcy5fY3VycmVudFNsaWRlLS1cclxuXHJcblx0XHRcdFx0dGhpcy5nZXRDdXJyZW50U2xpZGUoKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHJldHVybiBuZXcgU2xpZGVyKFtcclxuXHRcdFx0XHQnYXNzZXRzL2ltYWdlcy9zbGlkZXIvc2xpZGVyMS5qcGcnLFxyXG5cdFx0XHRcdCdhc3NldHMvaW1hZ2VzL3NsaWRlci9zbGlkZXIyLmpwZycsXHJcblx0XHRcdFx0J2Fzc2V0cy9pbWFnZXMvc2xpZGVyL3NsaWRlcjMuanBnJ1xyXG5cdFx0XHRdKVxyXG5cdH1dKTsiXX0=
